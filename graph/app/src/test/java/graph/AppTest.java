/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    public void testAddNode() {
        Graph testGraph = new Graph();
        Vertex node1 = testGraph.addNode("A");
        Vertex node2 = testGraph.addNode("B");
        Vertex node3 = testGraph.addNode("C");

        assertFalse(testGraph.getAdjVertices().isEmpty());
        assertEquals(testGraph.getSize(), 3);

        // Checks to see if the testGraph contains the added nodes
        assertTrue(testGraph.getAdjVertices().contains(node1));
        assertTrue(testGraph.getAdjVertices().contains(node2));
        assertTrue(testGraph.getAdjVertices().contains(node3));
    }

    @Test
    public void testAddEdge() {
        Graph testGraph = new Graph();
        Vertex vertex1 = testGraph.addNode("A");
        Vertex vertex2 = testGraph.addNode("B");
        Vertex vertex3 = testGraph.addNode("C");

        testGraph.addEdge("A", "B", 7);
        testGraph.addEdge("B", "C", 1);
        testGraph.addEdge("C", "A", 1000);

        assertTrue(testGraph.getSize() == 3);
    }

    @Test void testAllNeighbours() {
        Graph graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addEdge("A","B");
        List<Vertex> neighbours=graph.getNeighbors("A");
        assertEquals(graph.getNeighbors("A"), neighbours);
    }

    @Test void testAllNeighboursWithWeight() {
        Graph graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addEdge("A","B",20);
        List<Vertex> neighbours=graph.getNeighbors("A");
        assertEquals(graph.getNeighbors("A"),neighbours);
    }

    @Test void testSize() {
        Graph graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");
        assertEquals(graph.getSize(),4);
    }

    @Test void testIsEmpty() {
        Graph graph = new Graph();
        assertEquals(graph.getNodes(),null);
    }
}
