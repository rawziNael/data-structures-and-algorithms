/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    public void testAddNode() {
        Graph testGraph = new Graph();
        Vertex node1 = testGraph.addNode("A");
        Vertex node2 = testGraph.addNode("B");
        Vertex node3 = testGraph.addNode("C");

        assertFalse(testGraph.getAdjVertices().isEmpty());
        assertEquals(testGraph.getSize(), 3);

        // Checks to see if the testGraph contains the added nodes
        assertTrue(testGraph.getAdjVertices().contains(node1));
        assertTrue(testGraph.getAdjVertices().contains(node2));
        assertTrue(testGraph.getAdjVertices().contains(node3));
    }

    @Test
    public void testAddEdge() {
        Graph testGraph = new Graph();
        Vertex vertex1 = testGraph.addNode("A");
        Vertex vertex2 = testGraph.addNode("B");
        Vertex vertex3 = testGraph.addNode("C");

        testGraph.addEdge("A", "B", 7);
        testGraph.addEdge("B", "C", 1);
        testGraph.addEdge("C", "A", 1000);

        assertTrue(testGraph.getSize() == 3);
    }

    @Test void testAllNeighbours() {
        Graph graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addEdge("A","B");
        List<Vertex> neighbours=graph.getNeighbors("A");
        assertEquals(graph.getNeighbors("A"), neighbours);
    }

    @Test void testAllNeighboursWithWeight() {
        Graph graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addEdge("A","B",20);
        List<Vertex> neighbours=graph.getNeighbors("A");
        assertEquals(graph.getNeighbors("A"),neighbours);
    }

    @Test void testSize() {
        Graph graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");
        assertEquals(graph.getSize(),4);
    }

    @Test void testIsEmpty() {
        Graph graph = new Graph();
        assertEquals(graph.getNodes(),null);
    }

    @Test void testBFT1(){
        Graph graph = new Graph();

        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");

        graph.addEdge("A","B");
        graph.addEdge("A","C");
        graph.addEdge("B","C");
        graph.addEdge("B","D");


        Set<String> bfs = graph.bFT("A");
        Set<String> arr = new HashSet<>();
        arr.add("A");
        arr.add("B");
        arr.add("C");
        arr.add("D");

        assertEquals(arr,bfs);
    }

    @Test void testBFT2() {
        Graph graph = new Graph();

        graph.addNode("Pandora");
        graph.addNode("Arendelle");
        graph.addNode("Metroville");
        graph.addNode("Naboo");

        graph.addEdge("Pandora", "Arendelle");
        graph.addEdge("Arendelle", "Metroville");
        graph.addEdge("Naboo", "Metroville");

        Set<String> stringSet = graph.bFT("Pandora");
        Set<String> strings = new HashSet<>();
        strings.add("Pandora");
        strings.add("Arendelle");
        strings.add("Metroville");
        strings.add("Naboo");
        assertEquals(strings,stringSet);
    }

    @Test
    public void testBusinessTrip1(){

        Graph graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");

        graph.addEdge("A", "B", 5);
        graph.addEdge("C", "D", 10);
        graph.addEdge("A", "D", 12);

        String[] arr = {"A","D"};
        assertEquals(graph.businessTrip(graph, arr),12);
    }

    @Test
    public void testBusinessTrip2() {
        Graph testGraph = new Graph();
        testGraph.addNode("Metroville");
        testGraph.addNode("Pandora");
        testGraph.addNode("Arendelle");
        testGraph.addNode("Naboo");
        testGraph.addNode("New Monstropolis");

        testGraph.addEdge("Metroville", "Pandora", 25);
        testGraph.addEdge("Metroville", "New Monstropolis", 15);
        testGraph.addEdge("Pandora", "Arendelle", 25);
        testGraph.addEdge("Pandora", "Naboo", 15);
        testGraph.addEdge("Arendelle", "Naboo", 15);

        String[] testArray1 = {"Metroville", "Pandora", "Arendelle"};
        String[] testArray2 = {"New Monstropolis", "Metroville", "Pandora", "Arendelle", "Naboo"};
        String[] testArray3 = {"Pandora", "New Monstropolis"};
        String[] testArray4 = {"Arendelle", "Naboo", "Metroville"};
        String[] testArray5 = {""};
        String[] testArray6 = {};

        assertEquals(50 , testGraph.businessTrip(testGraph, testArray1));
        assertEquals(80, testGraph.businessTrip(testGraph, testArray2));
        assertEquals(0, testGraph.businessTrip(testGraph, testArray3));
        assertEquals(15, testGraph.businessTrip(testGraph, testArray4));
        assertEquals(0, testGraph.businessTrip(testGraph, testArray5));
        assertEquals(0, testGraph.businessTrip(testGraph, testArray6));
    }
}
