/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import hashtable.structure.HashMap;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class AppTest {
    HashMap<String , Integer> emptyHashtable;
    HashMap<String , Integer> ages;
    HashMap<String , Integer> groceries;

    @Before
    public void init() {

        emptyHashtable = new HashMap<>();

        ages = new HashMap<>();
        ages.add("Rawzi", 29);
        ages.add("Ali", 29);
        ages.add("Sabreen", 27);
        ages.add("Duaa", 28);

        groceries = new HashMap<>();
        groceries.add("Coffee", 35);
        groceries.add("Tea", 28);
        groceries.add("Bread", 10);
        groceries.add("Yogurt", 17);

    }

    @Test
    public void testEmptyHashMapSize() {
        assertEquals(0, emptyHashtable.getSize());
    }

    @Test
    public void TestHashMapIntegerSize() {
        assertEquals(4, ages.getSize());
    }

    @Test
    public void TestHashMapStringSize() {
        assertEquals(4, groceries.getSize());
    }

    @Test
    public void testEmptyHashMapIsEmpty() {
        assertTrue(emptyHashtable.isEmpty());
    }

    @Test
    public void TestHashMapIntegerIsEmpty() {
        assertFalse(ages.isEmpty());
    }

    @Test
    public void TestHashMapStringIsEmpty() {
        assertFalse(groceries.isEmpty());
    }

    @Test
    public void testEmptyHashMapGet() {
        assertNull(emptyHashtable.get("key"));
    }

    @Test
    public void TestHashMapIntegerGet() {
        assertEquals(Integer.valueOf(29), ages.get("Ali"));
        assertEquals(Integer.valueOf(29), ages.get("Rawzi"));
        assertEquals(Integer.valueOf(28), ages.get("Duaa"));
        assertEquals(Integer.valueOf(27), ages.get("Sabreen"));
    }

    @Test
    public void TestHashTableIntegerContains() {
        assertTrue(ages.contains("Ali"));
        assertFalse(ages.contains("Hasan"));
    }

    @Test
    public void TestHashTableStringContains() {
        assertTrue(groceries.contains("Coffee"));
        assertFalse(groceries.contains("Cheese"));
    }

    @Test
    public void testFindRepeat() {
        String testString1 = "Once upon a time, there was a brave princess who...";
        String testString2 = "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way â€“ in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only...";

        assertEquals("a", RepeatedWord.findRepeat(testString1));
        assertEquals("it", RepeatedWord.findRepeat(testString2));
    }
}
